name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
    
    - name: Create necessary directories
      run: |
        mkdir -p data/raw data/processed data/geo logs
    
    - name: Copy environment file
      run: cp env.example .env
    
    - name: Run linting
      run: |
        pip install flake8 black
        flake8 backend/ --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check backend/
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=backend --cov-report=xml --cov-report=term-missing
    
    - name: Test API startup
      run: |
        timeout 30s python -c "from backend.main import app; print('✅ API imports successfully')" || exit 1
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  api-health-check:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create environment
      run: |
        mkdir -p data/raw data/processed data/geo logs
        cp env.example .env
    
    - name: Start API server
      run: |
        uvicorn backend.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
    
    - name: Test API endpoints
      run: |
        # Test health endpoint
        curl -f http://localhost:8000/api/v1/health || exit 1
        
        # Test root endpoint
        curl -f http://localhost:8000/api/v1/ || exit 1
        
        # Test OpenAPI schema
        curl -f http://localhost:8000/openapi.json || exit 1
        
        echo "✅ All API endpoints working correctly"
    
    - name: Stop API server
      run: pkill -f uvicorn || true 